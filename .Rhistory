knitr::opts_chunk$set(echo = TRUE)
# usage
packages <- c("ggplot2", "dataMaid","factoextra")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("ggplot2", "dataMaid","factoextra")
ipak(packages)
# usage
packages <- c("ggplot2", "dataMaid","factoextra","cluster","dendextend")
ipak(packages)
# Load the data set
data("USArrests")
# Remove any missing value (i.e, NA values for not available)
# That might be present in the data
df <- na.omit(USArrests)
# View the firt 6 rows of the data
head(df, n = 6)
#some descriptive statistics
desc_stats <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(df)
head(df)
hclust(d, method = "complete")
# Dissimilarity matrix
d <- dist(df, method = "euclidean")
# Hierarchical clustering using Ward's method
res.hc <- hclust(d, method = "ward.D2" )
# Plot the obtained dendrogram
plot(res.hc, cex = 0.6, hang = -1)
View(USArrests)
knitr::opts_chunk$set(echo = TRUE)
# Agglomerative Nesting (Hierarchical Clustering)
agnes(x, metric = "euclidean", stand = FALSE, method = "average")
knitr::opts_chunk$set(echo = TRUE)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("ggplot2", "dataMaid","factoextra","cluster","dendextend")
ipak(packages)
# Load the data set
data("USArrests")
# Remove any missing value (i.e, NA values for not available)
# That might be present in the data
df <- na.omit(USArrests)
# View the firt 6 rows of the data
head(df, n = 6)
#some descriptive statistics
desc_stats <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(df)
head(df)
desc_stats <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(df)
head(df)
# Dissimilarity matrix
d <- dist(df, method = "euclidean")
# Hierarchical clustering using Ward's method
res.hc <- hclust(d, method = "ward.D2" )
# Plot the obtained dendrogram
plot(res.hc, cex = 0.6, hang = -1)
#The R function agnes() [in cluster package] can be also used to compute agglomerative hierarchical clustering. The R function diana() [ in cluster package ] is an example of divisive hierarchical clustering.
# Agglomerative Nesting (Hierarchical Clustering)
agnes(x, metric = "euclidean", stand = FALSE, method = "average")
knitr::opts_chunk$set(echo = TRUE)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("ggplot2", "dataMaid","factoextra","cluster","dendextend")
ipak(packages)
# Load the data set
data("USArrests")
# Remove any missing value (i.e, NA values for not available)
# That might be present in the data
df <- na.omit(USArrests)
# View the firt 6 rows of the data
head(df, n = 6)
#some descriptive statistics
desc_stats <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(df)
head(df)
# Agglomerative Nesting (Hierarchical Clustering)
agnes(d, metric = "euclidean", stand = FALSE, method = "average")
# Agglomerative Nesting (Hierarchical Clustering)
d<-agnes(d, metric = "euclidean", stand = FALSE, method = "average")
# Agglomerative Nesting (Hierarchical Clustering)
d<-agnes(d, metric = "euclidean", stand = FALSE, method = "average")
# Agglomerative Nesting (Hierarchical Clustering)
agnes(d, metric = "euclidean", stand = FALSE, method = "average")
# Dissimilarity matrix
d <- dist(df, method = "euclidean")
# Agglomerative Nesting (Hierarchical Clustering)
AggNes.hc<-agnes(d, metric = "euclidean", stand = FALSE, method = "average")
# Plot the obtained dendrogram
plot(res.hc, cex = 0.6, hang = -1)
# Plot the obtained dendrogram
plot(AggNes.hc, cex = 0.6, hang = -1)
# Plot the obtained dendrogram
plot(AggNes.hc, cex = 0.6)
# DIvisive ANAlysis Clustering
diana(d, metric = "euclidean", stand = FALSE)
hclust(d, method = "ward.D2" )
plot(AggNes.hc)
# DIvisive ANAlysis Clustering
diana.hc<-diana(d, metric = "euclidean", stand = FALSE)
plot(diana.hc)
# Compute agnes()
res.agnes <- agnes(d, method = "ward")
# Agglomerative coefficient
res.agnes$ac
## [1] 0.934621
# Plot the tree using pltree()
pltree(res.agnes, cex = 0.6, hang = -1,
main = "Dendrogram of agnes")
# plot.hclust()
plot(as.hclust(res.agnes), cex = 0.6, hang = -1)
# plot.dendrogram()
plot(as.dendrogram(res.agnes), cex = 0.6,
horiz = TRUE)
# Compute diana()
res.diana <- diana(d)
# Plot the tree
pltree(res.diana, cex = 0.6, hang = -1,
main = "Dendrogram of diana")
# Divise coefficient; amount of clustering structure found
res.diana$dc
# plot.hclust()
plot(as.hclust(res.diana), cex = 0.6, hang = -1)
# plot.dendrogram()
plot(as.dendrogram(res.diana), cex = 0.6,
horiz = TRUE)
# Dissimilarity matrix
d <- dist(df, method = "euclidean")
# Hierarchical clustering using Ward's method
res.hc <- hclust(d, method = "ward.D2" )
# Plot the obtained dendrogram
plot(res.hc, cex = 0.6, hang = -1)
# Cut tree into 4 groups
grp <- cutree(res.hc, k = 4)
# Number of members in each cluster
table(grp)
# Plot the obtained dendrogram
plot(res.hc, cex = 0.6, hang = -1)
# Cut tree into 4 groups
grp <- cutree(res.hc, k = 4)
# Number of members in each cluster
table(grp)
# Get the names for the members of cluster 1
rownames(df)[grp == 1]
#Itâ€™s also possible to draw the dendrogram with a border around the 4 clusters.
#The argument border is used to specify the border colors for the rectangles:
plot(res.hc, cex = 0.6)
rect.hclust(res.hc, k = 4, border = 2:5)
plot(res.hc, cex = 0.6)
rect.hclust(res.hc, k = 4, border = 2:5)
library(factoextra)
fviz_cluster(list(data = df, cluster = grp))
# Cut agnes() tree into 4 groups
cutree(res.agnes, k = 4)
# Cut diana() tree into 4 groups
cutree(as.hclust(res.diana), k = 4)
res.cor <- cor(t(df), method = "pearson")
res.cor <- cor(t(d), method = "pearson")
d.cor <- as.dist(1 - res.cor)
plot(hclust(d.cor, method = "ward.D2"), cex = 0.6)
res.cor <- cor(t(df), method = "pearson")
d.cor <- as.dist(1 - res.cor)
plot(hclust(d.cor, method = "ward.D2"), cex = 0.6)
#Subset containing 10 rows
set.seed(123)
ss <- sample(1:50, 10)
df <- df[ss,]
library(dendextend)
# Compute distance matrix
res.dist <- dist(df, method = "euclidean")
# Compute 2 hierarchical clusterings
hc1 <- hclust(res.dist, method = "average")
hc2 <- hclust(res.dist, method = "ward.D2")
# Create two dendrograms
dend1 <- as.dendrogram (hc1)
dend2 <- as.dendrogram (hc2)
# Create a list of dendrograms
dend_list <- dendlist(dend1, dend2)
#The function tanglegram() plots two dendrograms, side by side, with their labels connected by lines. It can be used for visually comparing two methods of Hierarchical clustering as follow:
tanglegram(dend1,dend2)
#The quality of the alignment of the two trees can be measured using the function entanglement(). The output of tanglegram() can be customized using many other options as follow:
tanglegram(dend1, dend2,
highlight_distinct_edges = FALSE, # Turn-off dashed lines
common_subtrees_color_lines = FALSE, # Turn-off line colors
common_subtrees_color_branches = TRUE, # Color common branches
main = paste("entanglement =", round(entanglement(dend_list), 2))
)
USArrests2<-USArrests
USArrests2$mean<-(USArrests2$Murder+USArrests2$Rape)/2
is.na(USArrests2$Murder)
any(is.na(USArrests2$Murder))
USArrests2<-USArrests
USArrests2[2, 2] = NA
USArrests2$mean <- rowMeans(USArrests2[c(2,3)], na.rm=TRUE)
USArrests2$mean <- rowMeans(USArrests2[c(1,2,3)], na.rm=TRUE)
USArrests2$mean <- rowMeans(USArrests2[c(2,3)], na.rm=TRUE)
USArrests2$mean <- rowMeans(USArrests2[c(1,2,3)], na.rm=TRUE)
USArrests2[2, 2] = 0
USArrests2$mean <- rowMeans(USArrests2[c(1,2,3)], na.rm=TRUE)
USArrests2[2, 2] = NA
USArrests2$mean <- rowMeans(USArrests2[c(1,2,3)], na.rm=TRUE)
USArrests2[2,2]
USArrests2[3,5]
knitr::opts_chunk$set(echo = TRUE)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("ggplot2", "dataMaid","factoextra","cluster","dendextend")
ipak(packages)
